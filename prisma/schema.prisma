// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  password       String
  avatar         String?
  slug           String    @unique
  posts          Post[]
  reactions      Reaction[]
  comments       Comment[]
  sentRequests   FriendRequest[] @relation("SentFriendRequests")
  receivedRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friends        Friend[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  status     String   @default("pending") // Can be "pending", "accepted", or "rejected"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  friendId  String
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model Post {
  id            String     @id @default(cuid())
  content       String     @db.Text
  image         String?    @db.VarChar(255)
  authorId      String     @db.VarChar(191)
  author        User       @relation(fields: [authorId], references: [id])
  reactions     Reaction[]
  reactionCount Int        @default(0)
  comments      Comment[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([authorId])
}

model Reaction {
  id           String   @id @default(cuid())
  post         Post     @relation(fields: [postId], references: [id])
  postId       String   @db.VarChar(191)
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.VarChar(191)
  reactionType String   @db.VarChar(50)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  postId    String   @db.VarChar(191)
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String   @db.VarChar(191)
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())

  @@index([postId])
  @@index([authorId])
}
